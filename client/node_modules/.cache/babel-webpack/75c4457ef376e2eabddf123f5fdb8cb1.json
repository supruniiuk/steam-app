{"ast":null,"code":"import _asyncToGenerator from \"/home/supruniuk/\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B/EPAM/steam-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { HttpClientTestingModule } from '@angular/common/http/testing';\nimport { TestBed } from '@angular/core/testing';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterTestingModule } from '@angular/router/testing';\nimport { EMPTY } from 'rxjs';\nimport { UserService } from 'src/app/shared/services/user.service';\nimport { FriendsPageComponent } from './friends-page.component';\ndescribe('FriendsPageComponent', () => {\n  let component;\n  let userService;\n  let info = {\n    age: 50,\n    email: 'exmple@gmail.com',\n    friendsList: [],\n    gamesList: [{\n      id: 'id1'\n    }],\n    id: '-MwDFeGzNW8gbGRQicfQ',\n    username: 'test'\n  };\n  let users = [{\n    email: \"abc@gmail.com\",\n    username: \"\",\n    id: \"-MwDErAZp7iK98goW2PU\"\n  }, {\n    email: \"bcd@gmail.com\",\n    username: \"\",\n    id: \"-MwDEvoJA0MuEMAwUPLu\"\n  }, {\n    email: \"cde@gmail.com\",\n    username: \"\",\n    id: \"-MwDF0cU6bspBxsPJUXM\"\n  }, {\n    email: \"def@gmail.com\",\n    username: \"\",\n    id: \"-MwDF9GG4fgVTM2xWtUW\"\n  }, {\n    email: \"efg@gmail.com\",\n    username: \"\",\n    id: \"-MwDFFJt8MQ4WDw1bzOM\"\n  }, {\n    email: \"fgh@gmail.com\",\n    username: \"\",\n    id: \"-MwDFKUQwOZQzXAZVTiN\"\n  }, {\n    email: \"ghij@gmail.com\",\n    username: \"\",\n    id: \"-MwDFU4GNO_vFvw26QWp\"\n  }, {\n    email: \"ijkl@gmail.com\",\n    username: \"\",\n    id: \"-MwDFYPchUDxdD9rcHze\"\n  }, {\n    age: 50,\n    email: \"juliasupruniuk23@gmail.com\",\n    username: \"yuliia\",\n    id: \"-MwDFhgchUDxdD9rcHze\"\n  }, {\n    email: \"steam@gmail.com\",\n    username: \"\",\n    id: \"-MwMpHEo9TfVPPEPG9zh\"\n  }];\n  beforeEach( /*#__PURE__*/_asyncToGenerator(function* () {\n    yield TestBed.configureTestingModule({\n      declarations: [FriendsPageComponent],\n      imports: [HttpClientTestingModule, RouterTestingModule, ReactiveFormsModule]\n    }).compileComponents();\n    userService = TestBed.inject(UserService);\n    component = new FriendsPageComponent(userService);\n    spyOn(userService, 'getCurrentUserInfo').and.callFake(() => {\n      return info;\n    });\n  }));\n  it('should create', () => {\n    expect(component).toBeTruthy();\n  });\n  it('calls getAllUsers when ngOnInit', () => {\n    const spy = spyOn(userService, 'getAllUsers').and.callFake(() => {\n      return EMPTY;\n    });\n    component.ngOnInit();\n    expect(spy).toHaveBeenCalled();\n  });\n  it('filter friends ', () => {\n    const spy = spyOn(userService, 'getAllUsers').and.callFake(() => {\n      return EMPTY;\n    });\n    component.ngOnInit();\n    expect(spy).toHaveBeenCalled();\n  });\n});","map":{"version":3,"sources":["/home/supruniuk/Рабочий стол/EPAM/steam-app/src/app/components/friends-page/friends-page.component.spec.ts"],"names":["HttpClientTestingModule","TestBed","ReactiveFormsModule","RouterTestingModule","EMPTY","UserService","FriendsPageComponent","describe","component","userService","info","age","email","friendsList","gamesList","id","username","users","beforeEach","configureTestingModule","declarations","imports","compileComponents","inject","spyOn","and","callFake","it","expect","toBeTruthy","spy","ngOnInit","toHaveBeenCalled"],"mappings":"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","sourcesContent":["import { HttpClientTestingModule } from '@angular/common/http/testing';\nimport { TestBed } from '@angular/core/testing';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterTestingModule } from '@angular/router/testing';\nimport { EMPTY } from 'rxjs';\nimport { UserService } from 'src/app/shared/services/user.service';\nimport { FriendsPageComponent } from './friends-page.component';\ndescribe('FriendsPageComponent', () => {\n    let component;\n    let userService;\n    let info = {\n        age: 50,\n        email: 'exmple@gmail.com',\n        friendsList: [],\n        gamesList: [{ id: 'id1' }],\n        id: '-MwDFeGzNW8gbGRQicfQ',\n        username: 'test',\n    };\n    let users = [\n        { email: \"abc@gmail.com\", username: \"\", id: \"-MwDErAZp7iK98goW2PU\" },\n        { email: \"bcd@gmail.com\", username: \"\", id: \"-MwDEvoJA0MuEMAwUPLu\" },\n        { email: \"cde@gmail.com\", username: \"\", id: \"-MwDF0cU6bspBxsPJUXM\" },\n        { email: \"def@gmail.com\", username: \"\", id: \"-MwDF9GG4fgVTM2xWtUW\" },\n        { email: \"efg@gmail.com\", username: \"\", id: \"-MwDFFJt8MQ4WDw1bzOM\" },\n        { email: \"fgh@gmail.com\", username: \"\", id: \"-MwDFKUQwOZQzXAZVTiN\" },\n        { email: \"ghij@gmail.com\", username: \"\", id: \"-MwDFU4GNO_vFvw26QWp\" },\n        { email: \"ijkl@gmail.com\", username: \"\", id: \"-MwDFYPchUDxdD9rcHze\" },\n        { age: 50, email: \"juliasupruniuk23@gmail.com\", username: \"yuliia\", id: \"-MwDFhgchUDxdD9rcHze\" },\n        { email: \"steam@gmail.com\", username: \"\", id: \"-MwMpHEo9TfVPPEPG9zh\" }\n    ];\n    beforeEach(async () => {\n        await TestBed.configureTestingModule({\n            declarations: [FriendsPageComponent],\n            imports: [\n                HttpClientTestingModule,\n                RouterTestingModule,\n                ReactiveFormsModule,\n            ],\n        }).compileComponents();\n        userService = TestBed.inject(UserService);\n        component = new FriendsPageComponent(userService);\n        spyOn(userService, 'getCurrentUserInfo').and.callFake(() => {\n            return info;\n        });\n    });\n    it('should create', () => {\n        expect(component).toBeTruthy();\n    });\n    it('calls getAllUsers when ngOnInit', () => {\n        const spy = spyOn(userService, 'getAllUsers').and.callFake(() => {\n            return EMPTY;\n        });\n        component.ngOnInit();\n        expect(spy).toHaveBeenCalled();\n    });\n    it('filter friends ', () => {\n        const spy = spyOn(userService, 'getAllUsers').and.callFake(() => {\n            return EMPTY;\n        });\n        component.ngOnInit();\n        expect(spy).toHaveBeenCalled();\n    });\n});\n"]},"metadata":{},"sourceType":"module"}