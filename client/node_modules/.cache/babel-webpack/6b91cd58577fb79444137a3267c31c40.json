{"ast":null,"code":"import _asyncToGenerator from \"/home/supruniuk/\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B/EPAM/steam-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { fakeAsync, TestBed, tick } from '@angular/core/testing';\nimport { Router } from '@angular/router';\nimport { HttpClientTestingModule } from '@angular/common/http/testing';\nimport { AuthService } from 'src/app/shared/services/auth.service';\nimport { Location } from \"@angular/common\";\nimport { LoginPageComponent } from './login-page.component';\nimport { RouterTestingModule } from '@angular/router/testing';\nimport { ReactiveFormsModule } from '@angular/forms';\ndescribe('LoginPageComponent', () => {\n  let component;\n  let authService;\n  let router;\n  let location;\n  beforeEach( /*#__PURE__*/_asyncToGenerator(function* () {\n    yield TestBed.configureTestingModule({\n      declarations: [LoginPageComponent],\n      imports: [HttpClientTestingModule, RouterTestingModule, ReactiveFormsModule]\n    }).compileComponents();\n    authService = TestBed.inject(AuthService);\n    router = TestBed.inject(Router);\n    component = new LoginPageComponent(authService, router);\n    location = TestBed.get(Location);\n  }));\n  it('should create', () => {\n    expect(component).toBeTruthy();\n  });\n  it('should create login form', () => {\n    expect(component.loginForm.contains('email')).toBeTruthy();\n    expect(component.loginForm.contains('password')).toBeTruthy();\n  });\n  it('should mark email as invalid if empty value', () => {\n    const control = component.loginForm.get('email');\n    control.setValue('');\n    expect(control.valid).toBeFalsy();\n  });\n  it('should mark password as invalid if empty value', () => {\n    const control = component.loginForm.get('password');\n    control.setValue('');\n    expect(control.valid).toBeFalsy();\n  });\n  it('should mark password as invalid if value is less than 6 symbols', () => {\n    const control = component.loginForm.get('password');\n    control.setValue('code');\n    expect(control.valid).toBeFalsy();\n  });\n  it('navigate to login if user session is active redirects you to /games', fakeAsync(() => {\n    localStorage.setItem('token', 'token');\n    router.navigate(['/']);\n    tick();\n    expect(location.path()).toBe('/games');\n  }));\n});","map":{"version":3,"sources":["/home/supruniuk/Рабочий стол/EPAM/steam-app/src/app/components/login-page/login-page.component.spec.ts"],"names":["fakeAsync","TestBed","tick","Router","HttpClientTestingModule","AuthService","Location","LoginPageComponent","RouterTestingModule","ReactiveFormsModule","describe","component","authService","router","location","beforeEach","configureTestingModule","declarations","imports","compileComponents","inject","get","it","expect","toBeTruthy","loginForm","contains","control","setValue","valid","toBeFalsy","localStorage","setItem","navigate","path","toBe"],"mappings":"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","sourcesContent":["import { fakeAsync, TestBed, tick } from '@angular/core/testing';\nimport { Router } from '@angular/router';\nimport { HttpClientTestingModule } from '@angular/common/http/testing';\nimport { AuthService } from 'src/app/shared/services/auth.service';\nimport { Location } from \"@angular/common\";\nimport { LoginPageComponent } from './login-page.component';\nimport { RouterTestingModule } from '@angular/router/testing';\nimport { ReactiveFormsModule } from '@angular/forms';\ndescribe('LoginPageComponent', () => {\n    let component;\n    let authService;\n    let router;\n    let location;\n    beforeEach(async () => {\n        await TestBed.configureTestingModule({\n            declarations: [LoginPageComponent],\n            imports: [\n                HttpClientTestingModule,\n                RouterTestingModule,\n                ReactiveFormsModule,\n            ],\n        }).compileComponents();\n        authService = TestBed.inject(AuthService);\n        router = TestBed.inject(Router);\n        component = new LoginPageComponent(authService, router);\n        location = TestBed.get(Location);\n    });\n    it('should create', () => {\n        expect(component).toBeTruthy();\n    });\n    it('should create login form', () => {\n        expect(component.loginForm.contains('email')).toBeTruthy();\n        expect(component.loginForm.contains('password')).toBeTruthy();\n    });\n    it('should mark email as invalid if empty value', () => {\n        const control = component.loginForm.get('email');\n        control.setValue('');\n        expect(control.valid).toBeFalsy();\n    });\n    it('should mark password as invalid if empty value', () => {\n        const control = component.loginForm.get('password');\n        control.setValue('');\n        expect(control.valid).toBeFalsy();\n    });\n    it('should mark password as invalid if value is less than 6 symbols', () => {\n        const control = component.loginForm.get('password');\n        control.setValue('code');\n        expect(control.valid).toBeFalsy();\n    });\n    it('navigate to login if user session is active redirects you to /games', fakeAsync(() => {\n        localStorage.setItem('token', 'token');\n        router.navigate(['/']);\n        tick();\n        expect(location.path()).toBe('/games');\n    }));\n});\n"]},"metadata":{},"sourceType":"module"}