{"ast":null,"code":"import _asyncToGenerator from \"/home/supruniuk/\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B/EPAM/steam-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { HttpClientTestingModule } from '@angular/common/http/testing';\nimport { TestBed } from '@angular/core/testing';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { EMPTY } from 'rxjs';\nimport { UserService } from 'src/app/shared/services/user.service';\nimport { ProfilePageComponent } from './profile-page.component';\ndescribe('ProfilePageComponent', () => {\n  let component;\n  let userService;\n  beforeEach( /*#__PURE__*/_asyncToGenerator(function* () {\n    yield TestBed.configureTestingModule({\n      declarations: [ProfilePageComponent],\n      imports: [HttpClientTestingModule, ReactiveFormsModule]\n    }).compileComponents();\n    const info = {\n      age: 50,\n      email: 'example@gmail.com',\n      friendsList: [],\n      gamesList: [],\n      username: 'name',\n      id: '-id'\n    };\n    userService = TestBed.inject(UserService);\n    component = new ProfilePageComponent(userService);\n    localStorage.setItem('userInfo', JSON.stringify(info));\n  }));\n  it('should create', () => {\n    expect(component).toBeTruthy();\n  });\n  it('should create updating form', () => {\n    expect(component.profileForm.contains('username')).toBeTruthy();\n    expect(component.profileForm.contains('age')).toBeTruthy();\n    expect(component.profileForm.contains('email')).toBeTruthy();\n  });\n  it('should call userService when user update info', () => {\n    const spy = spyOn(userService, 'updateUser').and.callFake(() => {\n      return EMPTY;\n    });\n    component.profileForm.patchValue({\n      email: 'test@example.com',\n      age: 34,\n      username: 'test'\n    });\n    component.save();\n    expect(spy).toHaveBeenCalled();\n  });\n});","map":{"version":3,"sources":["/home/supruniuk/Рабочий стол/EPAM/steam-app/src/app/components/profile-page/profile-page.component.spec.ts"],"names":["HttpClientTestingModule","TestBed","ReactiveFormsModule","EMPTY","UserService","ProfilePageComponent","describe","component","userService","beforeEach","configureTestingModule","declarations","imports","compileComponents","info","age","email","friendsList","gamesList","username","id","inject","localStorage","setItem","JSON","stringify","it","expect","toBeTruthy","profileForm","contains","spy","spyOn","and","callFake","patchValue","save","toHaveBeenCalled"],"mappings":";AAAA,SAASA,uBAAT,QAAwC,8BAAxC;AACA,SAASC,OAAT,QAAwB,uBAAxB;AACA,SAASC,mBAAT,QAAoC,gBAApC;AACA,SAASC,KAAT,QAAsB,MAAtB;AACA,SAASC,WAAT,QAA4B,sCAA5B;AACA,SAASC,oBAAT,QAAqC,0BAArC;AACAC,QAAQ,CAAC,sBAAD,EAAyB,MAAM;AACnC,MAAIC,SAAJ;AACA,MAAIC,WAAJ;AACAC,EAAAA,UAAU,iCAAC,aAAY;AACnB,UAAMR,OAAO,CAACS,sBAAR,CAA+B;AACjCC,MAAAA,YAAY,EAAE,CAACN,oBAAD,CADmB;AAEjCO,MAAAA,OAAO,EAAE,CAACZ,uBAAD,EAA0BE,mBAA1B;AAFwB,KAA/B,EAGHW,iBAHG,EAAN;AAIA,UAAMC,IAAI,GAAG;AACTC,MAAAA,GAAG,EAAE,EADI;AAETC,MAAAA,KAAK,EAAE,mBAFE;AAGTC,MAAAA,WAAW,EAAE,EAHJ;AAITC,MAAAA,SAAS,EAAE,EAJF;AAKTC,MAAAA,QAAQ,EAAE,MALD;AAMTC,MAAAA,EAAE,EAAE;AANK,KAAb;AAQAZ,IAAAA,WAAW,GAAGP,OAAO,CAACoB,MAAR,CAAejB,WAAf,CAAd;AACAG,IAAAA,SAAS,GAAG,IAAIF,oBAAJ,CAAyBG,WAAzB,CAAZ;AACAc,IAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCC,IAAI,CAACC,SAAL,CAAeX,IAAf,CAAjC;AACH,GAhBS,EAAV;AAiBAY,EAAAA,EAAE,CAAC,eAAD,EAAkB,MAAM;AACtBC,IAAAA,MAAM,CAACpB,SAAD,CAAN,CAAkBqB,UAAlB;AACH,GAFC,CAAF;AAGAF,EAAAA,EAAE,CAAC,6BAAD,EAAgC,MAAM;AACpCC,IAAAA,MAAM,CAACpB,SAAS,CAACsB,WAAV,CAAsBC,QAAtB,CAA+B,UAA/B,CAAD,CAAN,CAAmDF,UAAnD;AACAD,IAAAA,MAAM,CAACpB,SAAS,CAACsB,WAAV,CAAsBC,QAAtB,CAA+B,KAA/B,CAAD,CAAN,CAA8CF,UAA9C;AACAD,IAAAA,MAAM,CAACpB,SAAS,CAACsB,WAAV,CAAsBC,QAAtB,CAA+B,OAA/B,CAAD,CAAN,CAAgDF,UAAhD;AACH,GAJC,CAAF;AAKAF,EAAAA,EAAE,CAAC,+CAAD,EAAkD,MAAM;AACtD,UAAMK,GAAG,GAAGC,KAAK,CAACxB,WAAD,EAAc,YAAd,CAAL,CAAiCyB,GAAjC,CAAqCC,QAArC,CAA8C,MAAM;AAC5D,aAAO/B,KAAP;AACH,KAFW,CAAZ;AAGAI,IAAAA,SAAS,CAACsB,WAAV,CAAsBM,UAAtB,CAAiC;AAC7BnB,MAAAA,KAAK,EAAE,kBADsB;AAE7BD,MAAAA,GAAG,EAAE,EAFwB;AAG7BI,MAAAA,QAAQ,EAAE;AAHmB,KAAjC;AAKAZ,IAAAA,SAAS,CAAC6B,IAAV;AACAT,IAAAA,MAAM,CAACI,GAAD,CAAN,CAAYM,gBAAZ;AACH,GAXC,CAAF;AAYH,CAxCO,CAAR","sourcesContent":["import { HttpClientTestingModule } from '@angular/common/http/testing';\nimport { TestBed } from '@angular/core/testing';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { EMPTY } from 'rxjs';\nimport { UserService } from 'src/app/shared/services/user.service';\nimport { ProfilePageComponent } from './profile-page.component';\ndescribe('ProfilePageComponent', () => {\n    let component;\n    let userService;\n    beforeEach(async () => {\n        await TestBed.configureTestingModule({\n            declarations: [ProfilePageComponent],\n            imports: [HttpClientTestingModule, ReactiveFormsModule],\n        }).compileComponents();\n        const info = {\n            age: 50,\n            email: 'example@gmail.com',\n            friendsList: [],\n            gamesList: [],\n            username: 'name',\n            id: '-id',\n        };\n        userService = TestBed.inject(UserService);\n        component = new ProfilePageComponent(userService);\n        localStorage.setItem('userInfo', JSON.stringify(info));\n    });\n    it('should create', () => {\n        expect(component).toBeTruthy();\n    });\n    it('should create updating form', () => {\n        expect(component.profileForm.contains('username')).toBeTruthy();\n        expect(component.profileForm.contains('age')).toBeTruthy();\n        expect(component.profileForm.contains('email')).toBeTruthy();\n    });\n    it('should call userService when user update info', () => {\n        const spy = spyOn(userService, 'updateUser').and.callFake(() => {\n            return EMPTY;\n        });\n        component.profileForm.patchValue({\n            email: 'test@example.com',\n            age: 34,\n            username: 'test',\n        });\n        component.save();\n        expect(spy).toHaveBeenCalled();\n    });\n});\n"]},"metadata":{},"sourceType":"module"}