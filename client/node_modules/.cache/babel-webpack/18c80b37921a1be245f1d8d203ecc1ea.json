{"ast":null,"code":"import _asyncToGenerator from \"/home/supruniuk/\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B/EPAM/steam-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { HttpClientTestingModule } from '@angular/common/http/testing';\nimport { TestBed } from '@angular/core/testing';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterTestingModule } from '@angular/router/testing';\nimport { EMPTY, of } from 'rxjs';\nimport { UserService } from 'src/app/shared/services/user.service';\nimport { FriendsPageComponent } from './friends-page.component';\ndescribe('FriendsPageComponent', () => {\n  let component;\n  let userService;\n  let info = {\n    age: 50,\n    email: 'exmple@gmail.com',\n    friendsList: [{\n      id: '-MwDErAZp7iK98goW2PU',\n      email: 'abc@gmail.com'\n    }, {\n      email: 'bcd@gmail.com',\n      id: '-MwDEvoJA0MuEMAwUPLu'\n    }, {\n      email: 'ijkl@gmail.com',\n      id: '-MwDFYPchUDxdD9rcHze'\n    }],\n    gamesList: [{\n      id: 'id1'\n    }],\n    id: '-MwDFeGzNW8gbGRQicfQ',\n    username: 'test'\n  };\n  let users = [{\n    email: 'abc@gmail.com',\n    username: '',\n    id: '-MwDErAZp7iK98goW2PU'\n  }, {\n    email: 'bcd@gmail.com',\n    username: '',\n    id: '-MwDEvoJA0MuEMAwUPLu'\n  }, {\n    email: 'cde@gmail.com',\n    username: '',\n    id: '-MwDF0cU6bspBxsPJUXM'\n  }, {\n    email: 'def@gmail.com',\n    username: '',\n    id: '-MwDF9GG4fgVTM2xWtUW'\n  }, {\n    email: 'efg@gmail.com',\n    username: '',\n    id: '-MwDFFJt8MQ4WDw1bzOM'\n  }, {\n    email: 'fgh@gmail.com',\n    username: '',\n    id: '-MwDFKUQwOZQzXAZVTiN'\n  }, {\n    email: 'ghij@gmail.com',\n    username: '',\n    id: '-MwDFU4GNO_vFvw26QWp'\n  }, {\n    email: 'ijkl@gmail.com',\n    username: '',\n    id: '-MwDFYPchUDxdD9rcHze'\n  }, {\n    email: 'steam@gmail.com',\n    username: '',\n    id: '-MwMpHEo9TfVPPEPG9zh'\n  }];\n  let newFriends = [{\n    email: 'def@gmail.com',\n    username: '',\n    id: '-MwDF9GG4fgVTM2xWtUW'\n  }, {\n    email: 'efg@gmail.com',\n    username: '',\n    id: '-MwDFFJt8MQ4WDw1bzOM'\n  }, {\n    email: 'fgh@gmail.com',\n    username: '',\n    id: '-MwDFKUQwOZQzXAZVTiN'\n  }, {\n    email: 'ghij@gmail.com',\n    username: '',\n    id: '-MwDFU4GNO_vFvw26QWp'\n  }, {\n    email: 'ijkl@gmail.com',\n    username: '',\n    id: '-MwDFYPchUDxdD9rcHze'\n  }, {\n    email: 'steam@gmail.com',\n    username: '',\n    id: '-MwMpHEo9TfVPPEPG9zh'\n  }];\n  beforeEach( /*#__PURE__*/_asyncToGenerator(function* () {\n    yield TestBed.configureTestingModule({\n      declarations: [FriendsPageComponent],\n      imports: [HttpClientTestingModule, RouterTestingModule, ReactiveFormsModule]\n    }).compileComponents();\n    userService = TestBed.inject(UserService);\n    component = new FriendsPageComponent(userService);\n    spyOn(userService, 'getCurrentUserInfo').and.callFake(() => {\n      return info;\n    });\n  }));\n  it('should create', () => {\n    expect(component).toBeTruthy();\n  });\n  it('calls getAllUsers when ngOnInit', () => {\n    const spy = spyOn(userService, 'getAllUsers').and.callFake(() => {\n      return EMPTY;\n    });\n    component.ngOnInit();\n    expect(spy).toHaveBeenCalled();\n  });\n  it('filter users, to add someone, who doesn`t in friends', () => {\n    spyOn(userService, 'getAllUsers').and.callFake(() => {\n      return of(users);\n    });\n    component.ngOnInit();\n    console.log(\"component.friendsList\", component.friendsList.length);\n    console.log('component.user', component.users.length);\n    console.log(component.friendsList.map(f => f.id));\n  }); //component.users = users;\n\n  component.filterUsers();\n  expect(component.users.length).toEqual(newFriends.length);\n});\n;","map":{"version":3,"sources":["/home/supruniuk/Рабочий стол/EPAM/steam-app/src/app/components/friends-page/friends-page.component.spec.ts"],"names":["HttpClientTestingModule","TestBed","ReactiveFormsModule","RouterTestingModule","EMPTY","of","UserService","FriendsPageComponent","describe","component","userService","info","age","email","friendsList","id","gamesList","username","users","newFriends","beforeEach","configureTestingModule","declarations","imports","compileComponents","inject","spyOn","and","callFake","it","expect","toBeTruthy","spy","ngOnInit","toHaveBeenCalled","console","log","length","map","f","filterUsers","toEqual"],"mappings":"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","sourcesContent":["import { HttpClientTestingModule } from '@angular/common/http/testing';\nimport { TestBed } from '@angular/core/testing';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterTestingModule } from '@angular/router/testing';\nimport { EMPTY, of } from 'rxjs';\nimport { UserService } from 'src/app/shared/services/user.service';\nimport { FriendsPageComponent } from './friends-page.component';\ndescribe('FriendsPageComponent', () => {\n    let component;\n    let userService;\n    let info = {\n        age: 50,\n        email: 'exmple@gmail.com',\n        friendsList: [\n            { id: '-MwDErAZp7iK98goW2PU', email: 'abc@gmail.com' },\n            { email: 'bcd@gmail.com', id: '-MwDEvoJA0MuEMAwUPLu' },\n            { email: 'ijkl@gmail.com', id: '-MwDFYPchUDxdD9rcHze' },\n        ],\n        gamesList: [{ id: 'id1' }],\n        id: '-MwDFeGzNW8gbGRQicfQ',\n        username: 'test',\n    };\n    let users = [\n        { email: 'abc@gmail.com', username: '', id: '-MwDErAZp7iK98goW2PU' },\n        { email: 'bcd@gmail.com', username: '', id: '-MwDEvoJA0MuEMAwUPLu' },\n        { email: 'cde@gmail.com', username: '', id: '-MwDF0cU6bspBxsPJUXM' },\n        { email: 'def@gmail.com', username: '', id: '-MwDF9GG4fgVTM2xWtUW' },\n        { email: 'efg@gmail.com', username: '', id: '-MwDFFJt8MQ4WDw1bzOM' },\n        { email: 'fgh@gmail.com', username: '', id: '-MwDFKUQwOZQzXAZVTiN' },\n        { email: 'ghij@gmail.com', username: '', id: '-MwDFU4GNO_vFvw26QWp' },\n        { email: 'ijkl@gmail.com', username: '', id: '-MwDFYPchUDxdD9rcHze' },\n        { email: 'steam@gmail.com', username: '', id: '-MwMpHEo9TfVPPEPG9zh' },\n    ];\n    let newFriends = [\n        { email: 'def@gmail.com', username: '', id: '-MwDF9GG4fgVTM2xWtUW' },\n        { email: 'efg@gmail.com', username: '', id: '-MwDFFJt8MQ4WDw1bzOM' },\n        { email: 'fgh@gmail.com', username: '', id: '-MwDFKUQwOZQzXAZVTiN' },\n        { email: 'ghij@gmail.com', username: '', id: '-MwDFU4GNO_vFvw26QWp' },\n        { email: 'ijkl@gmail.com', username: '', id: '-MwDFYPchUDxdD9rcHze' },\n        { email: 'steam@gmail.com', username: '', id: '-MwMpHEo9TfVPPEPG9zh' },\n    ];\n    beforeEach(async () => {\n        await TestBed.configureTestingModule({\n            declarations: [FriendsPageComponent],\n            imports: [\n                HttpClientTestingModule,\n                RouterTestingModule,\n                ReactiveFormsModule,\n            ],\n        }).compileComponents();\n        userService = TestBed.inject(UserService);\n        component = new FriendsPageComponent(userService);\n        spyOn(userService, 'getCurrentUserInfo').and.callFake(() => {\n            return info;\n        });\n    });\n    it('should create', () => {\n        expect(component).toBeTruthy();\n    });\n    it('calls getAllUsers when ngOnInit', () => {\n        const spy = spyOn(userService, 'getAllUsers').and.callFake(() => {\n            return EMPTY;\n        });\n        component.ngOnInit();\n        expect(spy).toHaveBeenCalled();\n    });\n    it('filter users, to add someone, who doesn`t in friends', () => {\n        spyOn(userService, 'getAllUsers').and.callFake(() => {\n            return of(users);\n        });\n        component.ngOnInit();\n        console.log(\"component.friendsList\", component.friendsList.length);\n        console.log('component.user', component.users.length);\n        console.log(component.friendsList.map((f) => f.id));\n    });\n    //component.users = users;\n    component.filterUsers();\n    expect(component.users.length).toEqual(newFriends.length);\n});\n;\n"]},"metadata":{},"sourceType":"module"}