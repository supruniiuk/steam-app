{"ast":null,"code":"import _asyncToGenerator from \"/home/supruniuk/\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B/EPAM/steam-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { HttpClientTestingModule } from '@angular/common/http/testing';\nimport { TestBed } from '@angular/core/testing';\nimport { UserService } from 'src/app/shared/services/user.service';\nimport { ProfilePageComponent } from './profile-page.component';\ndescribe('ProfilePageComponent', () => {\n  let userService;\n  let component;\n  beforeEach( /*#__PURE__*/_asyncToGenerator(function* () {\n    yield TestBed.configureTestingModule({\n      declarations: [ProfilePageComponent],\n      imports: [HttpClientTestingModule]\n    }).compileComponents();\n    userService = TestBed.inject(UserService);\n    component = new ProfilePageComponent(userService);\n  }));\n  it('should be created', () => {\n    expect(component).toBeTruthy();\n  });\n  it('should create updating form', () => {\n    expect(component.profileForm.contains('username')).toBeTruthy();\n    expect(component.profileForm.contains('age')).toBeTruthy();\n    expect(component.profileForm.contains('email')).toBeTruthy();\n  });\n  /*it('should call userService when user updates info', () => {\n    const spy = spyOn(userService, 'updateUser').and.callFake(() => {\n      return EMPTY;\n    });\n       component.profileForm.patchValue({\n      email: 'test@example.com',\n      age: 34,\n      username: 'test',\n    });\n       component.save();\n    expect(spy).toHaveBeenCalled();\n  });*/\n});","map":{"version":3,"sources":["/home/supruniuk/Рабочий стол/EPAM/steam-app/src/app/components/profile-page/profile-page.component.spec.ts"],"names":["HttpClientTestingModule","TestBed","UserService","ProfilePageComponent","describe","userService","component","beforeEach","configureTestingModule","declarations","imports","compileComponents","inject","it","expect","toBeTruthy","profileForm","contains"],"mappings":";AAAA,SAASA,uBAAT,QAAwC,8BAAxC;AACA,SAASC,OAAT,QAAwB,uBAAxB;AACA,SAASC,WAAT,QAA4B,sCAA5B;AACA,SAASC,oBAAT,QAAqC,0BAArC;AACAC,QAAQ,CAAC,sBAAD,EAAyB,MAAM;AACnC,MAAIC,WAAJ;AACA,MAAIC,SAAJ;AACAC,EAAAA,UAAU,iCAAC,aAAY;AACnB,UAAMN,OAAO,CAACO,sBAAR,CAA+B;AACjCC,MAAAA,YAAY,EAAE,CAACN,oBAAD,CADmB;AAEjCO,MAAAA,OAAO,EAAE,CAACV,uBAAD;AAFwB,KAA/B,EAGHW,iBAHG,EAAN;AAIAN,IAAAA,WAAW,GAAGJ,OAAO,CAACW,MAAR,CAAeV,WAAf,CAAd;AACAI,IAAAA,SAAS,GAAG,IAAIH,oBAAJ,CAAyBE,WAAzB,CAAZ;AACH,GAPS,EAAV;AAQAQ,EAAAA,EAAE,CAAC,mBAAD,EAAsB,MAAM;AAC1BC,IAAAA,MAAM,CAACR,SAAD,CAAN,CAAkBS,UAAlB;AACH,GAFC,CAAF;AAGAF,EAAAA,EAAE,CAAC,6BAAD,EAAgC,MAAM;AACpCC,IAAAA,MAAM,CAACR,SAAS,CAACU,WAAV,CAAsBC,QAAtB,CAA+B,UAA/B,CAAD,CAAN,CAAmDF,UAAnD;AACAD,IAAAA,MAAM,CAACR,SAAS,CAACU,WAAV,CAAsBC,QAAtB,CAA+B,KAA/B,CAAD,CAAN,CAA8CF,UAA9C;AACAD,IAAAA,MAAM,CAACR,SAAS,CAACU,WAAV,CAAsBC,QAAtB,CAA+B,OAA/B,CAAD,CAAN,CAAgDF,UAAhD;AACH,GAJC,CAAF;AAKA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGC,CAjCO,CAAR","sourcesContent":["import { HttpClientTestingModule } from '@angular/common/http/testing';\nimport { TestBed } from '@angular/core/testing';\nimport { UserService } from 'src/app/shared/services/user.service';\nimport { ProfilePageComponent } from './profile-page.component';\ndescribe('ProfilePageComponent', () => {\n    let userService;\n    let component;\n    beforeEach(async () => {\n        await TestBed.configureTestingModule({\n            declarations: [ProfilePageComponent],\n            imports: [HttpClientTestingModule],\n        }).compileComponents();\n        userService = TestBed.inject(UserService);\n        component = new ProfilePageComponent(userService);\n    });\n    it('should be created', () => {\n        expect(component).toBeTruthy();\n    });\n    it('should create updating form', () => {\n        expect(component.profileForm.contains('username')).toBeTruthy();\n        expect(component.profileForm.contains('age')).toBeTruthy();\n        expect(component.profileForm.contains('email')).toBeTruthy();\n    });\n    /*it('should call userService when user updates info', () => {\n      const spy = spyOn(userService, 'updateUser').and.callFake(() => {\n        return EMPTY;\n      });\n  \n      component.profileForm.patchValue({\n        email: 'test@example.com',\n        age: 34,\n        username: 'test',\n      });\n  \n      component.save();\n      expect(spy).toHaveBeenCalled();\n    });*/\n});\n"]},"metadata":{},"sourceType":"module"}