{"ast":null,"code":"import { environment } from 'src/environments/environment';\nimport { catchError, map, tap } from 'rxjs/operators';\nimport { Subject, throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./user.service\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(http, userService) {\n      this.http = http;\n      this.userService = userService;\n      this.error$ = new Subject();\n    }\n\n    get token() {\n      const expiresIn = localStorage.getItem('expiresIn');\n      const expDate = new Date(expiresIn);\n\n      if (new Date() > expDate) {\n        this.logout();\n        return '';\n      }\n\n      return localStorage.getItem('token');\n    }\n\n    login(user) {\n      user.returnSecureToken = true;\n      return this.http.post(`https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=${environment.apiKey}`, user).pipe(tap(this.setToken), map(response => this.setUserId(response)), catchError(this.handleError.bind(this)));\n    }\n\n    registration(user) {\n      user.returnSecureToken = true;\n      return this.http.post(`https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=${environment.apiKey}`, user).pipe(tap(this.setToken), map(response => this.createUser(response)), catchError(this.handleError.bind(this)));\n    }\n\n    logout() {\n      this.setToken(null);\n    }\n\n    isAuthenticated() {\n      return !!this.token;\n    }\n\n    handleError(error) {\n      const {\n        message\n      } = error.error.error;\n\n      switch (message) {\n        case 'INVALID_EMAIL':\n          this.error$.next('Invalid email');\n          break;\n\n        case 'INVALID_PASSWORD':\n          this.error$.next('Invalid password');\n          break;\n\n        case 'EMAIL_NOT_FOUND':\n          this.error$.next('User with this email not found');\n          break;\n\n        case 'EMAIL_EXISTS':\n          this.error$.next('User with this email already exists');\n          break;\n      }\n\n      setTimeout(() => {\n        this.error$.next('');\n      }, 2000);\n      return throwError(error);\n    }\n\n    setToken(response) {\n      if (response) {\n        const expDate = new Date(new Date().getTime() + +response.expiresIn * 1000);\n        localStorage.setItem('email', response.email);\n        localStorage.setItem('token', response.idToken);\n        localStorage.setItem('expiresIn', expDate.toString());\n      } else {\n        localStorage.clear();\n      }\n    }\n\n    createUser(response) {\n      if (response) {\n        const user = {\n          email: response.email,\n          username: '',\n          age: null,\n          friendsList: [],\n          gamesList: []\n        };\n        this.userService.createUser(user).subscribe(res => {\n          this.setUserId(user);\n        });\n      }\n    }\n\n    setUserId(response) {\n      this.userService.getAllUsers().subscribe(res => {\n        const users = Object.keys(res).map(key => {\n          res[key].id = key;\n          return res[key];\n        });\n        const userInfo = users.filter(u => u.email == response.email)[0];\n        localStorage.setItem('userInfo', JSON.stringify(userInfo));\n      });\n    }\n\n  }\n\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.UserService));\n  };\n\n  AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module"}