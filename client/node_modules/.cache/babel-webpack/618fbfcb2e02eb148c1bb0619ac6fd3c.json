{"ast":null,"code":"import _asyncToGenerator from \"/home/supruniuk/\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B/EPAM/steam-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { HttpClientTestingModule } from '@angular/common/http/testing';\nimport { TestBed } from '@angular/core/testing';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterTestingModule } from '@angular/router/testing';\nimport { EMPTY } from 'rxjs';\nimport { UserService } from 'src/app/shared/services/user.service';\nimport { ProfilePageComponent } from './profile-page.component';\ndescribe('ProfilePageComponent', () => {\n  let component;\n  let userService;\n  const info = {\n    age: 50,\n    email: 'example@gmail.com',\n    friendsList: [],\n    gamesList: [],\n    username: 'name',\n    id: '-id'\n  };\n  beforeEach( /*#__PURE__*/_asyncToGenerator(function* () {\n    yield TestBed.configureTestingModule({\n      declarations: [ProfilePageComponent],\n      imports: [HttpClientTestingModule, RouterTestingModule, ReactiveFormsModule]\n    }).compileComponents();\n    userService = TestBed.inject(UserService);\n    component = new ProfilePageComponent(userService); //localStorage.setItem('userInfo', JSON.stringify(info));\n  }));\n  it('should create', () => {\n    expect(component).toBeTruthy();\n  });\n  it('should create updating form', () => {\n    spyOn(userService, 'getCurrentUserInfo').and.callFake(() => {\n      return info;\n    });\n    expect(component.profileForm.contains('username')).toBeTruthy();\n    expect(component.profileForm.contains('age')).toBeTruthy();\n    expect(component.profileForm.contains('email')).toBeTruthy();\n  });\n  it('should call userService when user updates info', () => {\n    const spy = spyOn(userService, 'updateUser').and.callFake(() => {\n      return EMPTY;\n    });\n    component.profileForm.patchValue({\n      email: 'test@example.com',\n      age: 34,\n      username: 'test'\n    });\n    component.save();\n    expect(spy).toHaveBeenCalled();\n  });\n});","map":{"version":3,"sources":["/home/supruniuk/Рабочий стол/EPAM/steam-app/src/app/components/profile-page/profile-page.component.spec.ts"],"names":["HttpClientTestingModule","TestBed","ReactiveFormsModule","RouterTestingModule","EMPTY","UserService","ProfilePageComponent","describe","component","userService","info","age","email","friendsList","gamesList","username","id","beforeEach","configureTestingModule","declarations","imports","compileComponents","inject","it","expect","toBeTruthy","spyOn","and","callFake","profileForm","contains","spy","patchValue","save","toHaveBeenCalled"],"mappings":";AAAA,SAASA,uBAAT,QAAwC,8BAAxC;AACA,SAASC,OAAT,QAAwB,uBAAxB;AACA,SAASC,mBAAT,QAAoC,gBAApC;AACA,SAASC,mBAAT,QAAoC,yBAApC;AACA,SAASC,KAAT,QAAsB,MAAtB;AACA,SAASC,WAAT,QAA4B,sCAA5B;AACA,SAASC,oBAAT,QAAqC,0BAArC;AACAC,QAAQ,CAAC,sBAAD,EAAyB,MAAM;AACnC,MAAIC,SAAJ;AACA,MAAIC,WAAJ;AACA,QAAMC,IAAI,GAAG;AACTC,IAAAA,GAAG,EAAE,EADI;AAETC,IAAAA,KAAK,EAAE,mBAFE;AAGTC,IAAAA,WAAW,EAAE,EAHJ;AAITC,IAAAA,SAAS,EAAE,EAJF;AAKTC,IAAAA,QAAQ,EAAE,MALD;AAMTC,IAAAA,EAAE,EAAE;AANK,GAAb;AAQAC,EAAAA,UAAU,iCAAC,aAAY;AACnB,UAAMhB,OAAO,CAACiB,sBAAR,CAA+B;AACjCC,MAAAA,YAAY,EAAE,CAACb,oBAAD,CADmB;AAEjCc,MAAAA,OAAO,EAAE,CACLpB,uBADK,EAELG,mBAFK,EAGLD,mBAHK;AAFwB,KAA/B,EAOHmB,iBAPG,EAAN;AAQAZ,IAAAA,WAAW,GAAGR,OAAO,CAACqB,MAAR,CAAejB,WAAf,CAAd;AACAG,IAAAA,SAAS,GAAG,IAAIF,oBAAJ,CAAyBG,WAAzB,CAAZ,CAVmB,CAWnB;AACH,GAZS,EAAV;AAaAc,EAAAA,EAAE,CAAC,eAAD,EAAkB,MAAM;AACtBC,IAAAA,MAAM,CAAChB,SAAD,CAAN,CAAkBiB,UAAlB;AACH,GAFC,CAAF;AAGAF,EAAAA,EAAE,CAAC,6BAAD,EAAgC,MAAM;AACpCG,IAAAA,KAAK,CAACjB,WAAD,EAAc,oBAAd,CAAL,CAAyCkB,GAAzC,CAA6CC,QAA7C,CAAsD,MAAM;AACxD,aAAOlB,IAAP;AACH,KAFD;AAGAc,IAAAA,MAAM,CAAChB,SAAS,CAACqB,WAAV,CAAsBC,QAAtB,CAA+B,UAA/B,CAAD,CAAN,CAAmDL,UAAnD;AACAD,IAAAA,MAAM,CAAChB,SAAS,CAACqB,WAAV,CAAsBC,QAAtB,CAA+B,KAA/B,CAAD,CAAN,CAA8CL,UAA9C;AACAD,IAAAA,MAAM,CAAChB,SAAS,CAACqB,WAAV,CAAsBC,QAAtB,CAA+B,OAA/B,CAAD,CAAN,CAAgDL,UAAhD;AACH,GAPC,CAAF;AAQAF,EAAAA,EAAE,CAAC,gDAAD,EAAmD,MAAM;AACvD,UAAMQ,GAAG,GAAGL,KAAK,CAACjB,WAAD,EAAc,YAAd,CAAL,CAAiCkB,GAAjC,CAAqCC,QAArC,CAA8C,MAAM;AAC5D,aAAOxB,KAAP;AACH,KAFW,CAAZ;AAGAI,IAAAA,SAAS,CAACqB,WAAV,CAAsBG,UAAtB,CAAiC;AAC7BpB,MAAAA,KAAK,EAAE,kBADsB;AAE7BD,MAAAA,GAAG,EAAE,EAFwB;AAG7BI,MAAAA,QAAQ,EAAE;AAHmB,KAAjC;AAKAP,IAAAA,SAAS,CAACyB,IAAV;AACAT,IAAAA,MAAM,CAACO,GAAD,CAAN,CAAYG,gBAAZ;AACH,GAXC,CAAF;AAYH,CA/CO,CAAR","sourcesContent":["import { HttpClientTestingModule } from '@angular/common/http/testing';\nimport { TestBed } from '@angular/core/testing';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterTestingModule } from '@angular/router/testing';\nimport { EMPTY } from 'rxjs';\nimport { UserService } from 'src/app/shared/services/user.service';\nimport { ProfilePageComponent } from './profile-page.component';\ndescribe('ProfilePageComponent', () => {\n    let component;\n    let userService;\n    const info = {\n        age: 50,\n        email: 'example@gmail.com',\n        friendsList: [],\n        gamesList: [],\n        username: 'name',\n        id: '-id',\n    };\n    beforeEach(async () => {\n        await TestBed.configureTestingModule({\n            declarations: [ProfilePageComponent],\n            imports: [\n                HttpClientTestingModule,\n                RouterTestingModule,\n                ReactiveFormsModule,\n            ],\n        }).compileComponents();\n        userService = TestBed.inject(UserService);\n        component = new ProfilePageComponent(userService);\n        //localStorage.setItem('userInfo', JSON.stringify(info));\n    });\n    it('should create', () => {\n        expect(component).toBeTruthy();\n    });\n    it('should create updating form', () => {\n        spyOn(userService, 'getCurrentUserInfo').and.callFake(() => {\n            return info;\n        });\n        expect(component.profileForm.contains('username')).toBeTruthy();\n        expect(component.profileForm.contains('age')).toBeTruthy();\n        expect(component.profileForm.contains('email')).toBeTruthy();\n    });\n    it('should call userService when user updates info', () => {\n        const spy = spyOn(userService, 'updateUser').and.callFake(() => {\n            return EMPTY;\n        });\n        component.profileForm.patchValue({\n            email: 'test@example.com',\n            age: 34,\n            username: 'test',\n        });\n        component.save();\n        expect(spy).toHaveBeenCalled();\n    });\n});\n"]},"metadata":{},"sourceType":"module"}