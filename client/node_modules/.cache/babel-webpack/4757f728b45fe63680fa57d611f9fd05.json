{"ast":null,"code":"import _asyncToGenerator from \"/home/supruniuk/\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B/EPAM/steam-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { HttpClientTestingModule } from '@angular/common/http/testing';\nimport { TestBed } from '@angular/core/testing';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterTestingModule } from '@angular/router/testing';\nimport { EMPTY, of } from 'rxjs';\nimport { UserService } from 'src/app/shared/services/user.service';\nimport { FriendsPageComponent } from './friends-page.component';\ndescribe('FriendsPageComponent', () => {\n  let component;\n  let userService;\n  let info = {\n    age: 50,\n    email: 'exmple@gmail.com',\n    friendsList: [{\n      id: '-MwDErAZp7iK98goW2PU',\n      email: 'abc@gmail.com'\n    }, {\n      email: 'bcd@gmail.com',\n      id: '-MwDEvoJA0MuEMAwUPLu'\n    }, {\n      email: 'ijkl@gmail.com',\n      id: '-MwDFYPchUDxdD9rcHze'\n    }],\n    gamesList: [{\n      id: 'id1'\n    }],\n    id: '-MwDFeGzNW8gbGRQicfQ',\n    username: 'test'\n  };\n  let allUsers = {\n    '-MwDErAZp7iK98goW2PU': {\n      email: 'abc@gmail.com',\n      username: ''\n    },\n    '-MwDEvoJA0MuEMAwUPLu': {\n      email: 'bcd@gmail.com',\n      username: ''\n    },\n    '-MwDF0cU6bspBxsPJUXM': {\n      email: 'cde@gmail.com',\n      username: ''\n    },\n    '-MwDF9GG4fgVTM2xWtUW': {\n      email: 'def@gmail.com',\n      username: ''\n    },\n    '-MwDFFJt8MQ4WDw1bzOM': {\n      email: 'efg@gmail.com',\n      username: ''\n    },\n    '-MwDFKUQwOZQzXAZVTiN': {\n      email: 'fgh@gmail.com',\n      username: ''\n    },\n    '-MwDFU4GNO_vFvw26QWp': {\n      email: 'ghij@gmail.com',\n      username: ''\n    },\n    '-MwDFYPchUDxdD9rcHze': {\n      email: 'ijkl@gmail.com',\n      username: ''\n    },\n    '-MwMpHEo9TfVPPEPG9zh': {\n      email: 'steam@gmail.com',\n      username: ''\n    },\n    '-MwDFeGzNW8gbGRQicfQ': {\n      age: 50,\n      email: 'exmple@gmail.com',\n      friendsList: [{\n        id: '-MwDErAZp7iK98goW2PU',\n        email: 'abc@gmail.com'\n      }, {\n        email: 'bcd@gmail.com',\n        id: '-MwDEvoJA0MuEMAwUPLu'\n      }, {\n        email: 'ijkl@gmail.com',\n        id: '-MwDFYPchUDxdD9rcHze'\n      }],\n      gamesList: [{\n        id: 'id1'\n      }],\n      username: 'test'\n    }\n  };\n  let newFriends = [{\n    email: 'def@gmail.com',\n    username: '',\n    id: '-MwDF9GG4fgVTM2xWtUW'\n  }, {\n    email: 'efg@gmail.com',\n    username: '',\n    id: '-MwDFFJt8MQ4WDw1bzOM'\n  }, {\n    email: 'fgh@gmail.com',\n    username: '',\n    id: '-MwDFKUQwOZQzXAZVTiN'\n  }, {\n    email: 'ghij@gmail.com',\n    username: '',\n    id: '-MwDFU4GNO_vFvw26QWp'\n  }, {\n    email: 'ijkl@gmail.com',\n    username: '',\n    id: '-MwDFYPchUDxdD9rcHze'\n  }, {\n    email: 'steam@gmail.com',\n    username: '',\n    id: '-MwMpHEo9TfVPPEPG9zh'\n  }];\n  beforeEach( /*#__PURE__*/_asyncToGenerator(function* () {\n    yield TestBed.configureTestingModule({\n      declarations: [FriendsPageComponent],\n      imports: [HttpClientTestingModule, RouterTestingModule, ReactiveFormsModule]\n    }).compileComponents();\n    userService = TestBed.inject(UserService);\n    component = new FriendsPageComponent(userService);\n    spyOn(userService, 'getCurrentUserInfo').and.callFake(() => {\n      return info;\n    });\n  }));\n  it('should create', () => {\n    expect(component).toBeTruthy();\n  });\n  it('calls getAllUsers when ngOnInit', () => {\n    const spy = spyOn(userService, 'getAllUsers').and.callFake(() => {\n      return EMPTY;\n    });\n    component.ngOnInit();\n    expect(spy).toHaveBeenCalled();\n  });\n  it('filter users, to add someone, who doesn`t in friends', () => {\n    spyOn(userService, 'getAllUsers').and.callFake(() => {\n      return of(allUsers);\n    });\n    component.ngOnInit();\n    component.users = allUsers;\n    component.filterUsers();\n    const friends = component.friendsList.map(f => f.id);\n    console.log('NDLJVNLDNVJDBVKJBSJB', component.users.filter(u => {\n      console.log(u);\n\n      if (u.email !== component.user.email && !friends.includes(u.id)) {\n        return true;\n      } else {\n        return false;\n      }\n    }).length);\n    expect(component.users.length).toEqual(newFriends.length);\n  });\n});","map":{"version":3,"sources":["/home/supruniuk/Рабочий стол/EPAM/steam-app/src/app/components/friends-page/friends-page.component.spec.ts"],"names":["HttpClientTestingModule","TestBed","ReactiveFormsModule","RouterTestingModule","EMPTY","of","UserService","FriendsPageComponent","describe","component","userService","info","age","email","friendsList","id","gamesList","username","allUsers","newFriends","beforeEach","configureTestingModule","declarations","imports","compileComponents","inject","spyOn","and","callFake","it","expect","toBeTruthy","spy","ngOnInit","toHaveBeenCalled","users","filterUsers","friends","map","f","console","log","filter","u","user","includes","length","toEqual"],"mappings":"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","sourcesContent":["import { HttpClientTestingModule } from '@angular/common/http/testing';\nimport { TestBed } from '@angular/core/testing';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterTestingModule } from '@angular/router/testing';\nimport { EMPTY, of } from 'rxjs';\nimport { UserService } from 'src/app/shared/services/user.service';\nimport { FriendsPageComponent } from './friends-page.component';\ndescribe('FriendsPageComponent', () => {\n    let component;\n    let userService;\n    let info = {\n        age: 50,\n        email: 'exmple@gmail.com',\n        friendsList: [\n            { id: '-MwDErAZp7iK98goW2PU', email: 'abc@gmail.com' },\n            { email: 'bcd@gmail.com', id: '-MwDEvoJA0MuEMAwUPLu' },\n            { email: 'ijkl@gmail.com', id: '-MwDFYPchUDxdD9rcHze' },\n        ],\n        gamesList: [{ id: 'id1' }],\n        id: '-MwDFeGzNW8gbGRQicfQ',\n        username: 'test',\n    };\n    let allUsers = {\n        '-MwDErAZp7iK98goW2PU': { email: 'abc@gmail.com', username: '' },\n        '-MwDEvoJA0MuEMAwUPLu': { email: 'bcd@gmail.com', username: '' },\n        '-MwDF0cU6bspBxsPJUXM': { email: 'cde@gmail.com', username: '' },\n        '-MwDF9GG4fgVTM2xWtUW': { email: 'def@gmail.com', username: '' },\n        '-MwDFFJt8MQ4WDw1bzOM': { email: 'efg@gmail.com', username: '' },\n        '-MwDFKUQwOZQzXAZVTiN': { email: 'fgh@gmail.com', username: '' },\n        '-MwDFU4GNO_vFvw26QWp': { email: 'ghij@gmail.com', username: '' },\n        '-MwDFYPchUDxdD9rcHze': { email: 'ijkl@gmail.com', username: '' },\n        '-MwMpHEo9TfVPPEPG9zh': { email: 'steam@gmail.com', username: '' },\n        '-MwDFeGzNW8gbGRQicfQ': {\n            age: 50,\n            email: 'exmple@gmail.com',\n            friendsList: [\n                { id: '-MwDErAZp7iK98goW2PU', email: 'abc@gmail.com' },\n                { email: 'bcd@gmail.com', id: '-MwDEvoJA0MuEMAwUPLu' },\n                { email: 'ijkl@gmail.com', id: '-MwDFYPchUDxdD9rcHze' },\n            ],\n            gamesList: [{ id: 'id1' }],\n            username: 'test',\n        },\n    };\n    let newFriends = [\n        { email: 'def@gmail.com', username: '', id: '-MwDF9GG4fgVTM2xWtUW' },\n        { email: 'efg@gmail.com', username: '', id: '-MwDFFJt8MQ4WDw1bzOM' },\n        { email: 'fgh@gmail.com', username: '', id: '-MwDFKUQwOZQzXAZVTiN' },\n        { email: 'ghij@gmail.com', username: '', id: '-MwDFU4GNO_vFvw26QWp' },\n        { email: 'ijkl@gmail.com', username: '', id: '-MwDFYPchUDxdD9rcHze' },\n        { email: 'steam@gmail.com', username: '', id: '-MwMpHEo9TfVPPEPG9zh' },\n    ];\n    beforeEach(async () => {\n        await TestBed.configureTestingModule({\n            declarations: [FriendsPageComponent],\n            imports: [\n                HttpClientTestingModule,\n                RouterTestingModule,\n                ReactiveFormsModule,\n            ],\n        }).compileComponents();\n        userService = TestBed.inject(UserService);\n        component = new FriendsPageComponent(userService);\n        spyOn(userService, 'getCurrentUserInfo').and.callFake(() => {\n            return info;\n        });\n    });\n    it('should create', () => {\n        expect(component).toBeTruthy();\n    });\n    it('calls getAllUsers when ngOnInit', () => {\n        const spy = spyOn(userService, 'getAllUsers').and.callFake(() => {\n            return EMPTY;\n        });\n        component.ngOnInit();\n        expect(spy).toHaveBeenCalled();\n    });\n    it('filter users, to add someone, who doesn`t in friends', () => {\n        spyOn(userService, 'getAllUsers').and.callFake(() => {\n            return of(allUsers);\n        });\n        component.ngOnInit();\n        component.users = allUsers;\n        component.filterUsers();\n        const friends = component.friendsList.map((f) => f.id);\n        console.log('NDLJVNLDNVJDBVKJBSJB', component.users.filter((u) => {\n            console.log(u);\n            if (u.email !== component.user.email && !friends.includes(u.id)) {\n                return true;\n            }\n            else {\n                return false;\n            }\n        }).length);\n        expect(component.users.length).toEqual(newFriends.length);\n    });\n});\n"]},"metadata":{},"sourceType":"module"}